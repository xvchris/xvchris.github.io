[{"categories":null,"content":"3proxy .deb包安装教程：Socks5 + HTTP + 用户名密码认证 前言 3proxy是一个轻量级的代理服务器，支持SOCKS5和HTTP代理协议。相比其他代理软件，3proxy配置简单，资源占用少，非常适合在VPS上部署。 本文将详细介绍如何使用.deb包安装3proxy，并配置SOCKS5和HTTP代理，同时启用用户名密码认证。 一、下载和安装3proxy 1.1 下载.deb包 wget https://github.com/3proxy/3proxy/releases/download/0.9.5/3proxy-0.9.5.x86_64.deb -O 3proxy.deb 1.2 安装3proxy sudo dpkg -i 3proxy.deb sudo apt-get install -f -y # 修复依赖 安装完成后，3proxy会自动生成systemd服务文件：/lib/systemd/system/3proxy.service 二、停止默认服务并清理 2.1 停止systemd服务 sudo systemctl stop 3proxy.service sudo systemctl disable 3proxy.service sudo pkill -f 3proxy 2.2 确认端口已释放 sudo ss -tulnp | grep 3proxy 如果输出为空，说明没有残留进程，端口已释放。 三、配置SOCKS5 + HTTP代理 3.1 创建配置目录 sudo mkdir -p /etc/3proxy/conf sudo nano /etc/3proxy/conf/3proxy.cfg 3.2 最小配置示例 daemon # 用户认证 auth strong users test:CL:123456 allow test # SOCKS5 代理端口 socks -p1081 # HTTP 代理端口 proxy -p8080 配置说明： daemon：以守护进程模式运行 auth strong：启用强认证 users test:CL:123456：创建用户test，密码123456 allow test：允许用户test访问 socks -p1081：SOCKS5代理监听1081端口 proxy -p8080：HTTP代理监听8080端口 ⚠️ 注意：.deb安装的3proxy默认日志可能报错，如果不需要日志，可以直接删除log配置。 四、手动启动测试 4.1 启动3proxy sudo /usr/local/3proxy/3proxy /etc/3proxy/conf/3proxy.cfg 4.2 检查端口监听 sudo ss -tulnp | grep 3proxy 应该看到1081（SOCKS5）和8080（HTTP）端口在监听。 五、测试代理功能 5.1 Linux/macOS测试 SOCKS5代理测试： curl -x socks5://test:123456@\u003c服务器IP\u003e:1081 http://httpbin.org/ip HTTP代理测试： curl -x http://test:123456@\u003c服务器IP\u003e:8080 http://httpbin.org/ip 如果返回服务器的公网IP，说明代理配置成功。 注意事项： macOS的curl如果socks5h://报错，使用socks5://即可 将\u003c服务器IP\u003e替换为实际的服务器IP地址 5.2 Windows测试 使用curl for Windows： curl -x socks5://test:123456@\u003c服务器IP\u003e:1081 http://httpbin.org/ip curl -x http://test:123456@\u003c服务器IP\u003e:8080 http://httpbin.org/ip 六、配置systemd自启动 6.1 创建自定义systemd服务 sudo nano /etc/systemd/system/3proxy.service 6.2 服务文件内容 [Unit] Description=3proxy tiny proxy server After=network.target [Service] ExecStart=/usr/local/3proxy/3proxy /etc/3proxy/conf/3proxy.cfg Restart=on-failure [Install] WantedBy=multi-user.target 6.3 启用并启动服务 sudo systemctl daemon-reload sudo systemctl enable 3proxy.service sudo systemctl start 3proxy.service sudo systemctl status 3proxy.service 七、防火墙配置 7.1 本地防火墙放行 sudo ufw allow 1081/tcp sudo ufw allow 8080/tcp 7.2 VPS提供商安全组配置 重要提醒：除了本地防火墙，还需要在VPS提供商的控制面板中配置安全组，放行相应端口： 阿里云ECS：在安全组规则中添加1081和8080端口的入方向规则 腾讯云CVM：在安全组中添加1081和8080端口的入站规则 AWS EC2：在Security Groups中添加1081和8080端口的Inbound规则 DigitalOcean：在Firewalls中添加1081和8080端口的Inbound规则 八、高级配置 8.1 多用户配置 daemon # 多用户认证 auth strong users user1:CL:password1 users user2:CL:password2 users user3:CL:password3 # 允许所有用户 allow user1 allow user2 allow user3 # 代理端口 socks -p1081 proxy -p8080 8.2 限制访问IP daemon # 用户认证 auth strong users test:CL:123456 # 只允许特定IP访问 allow test 192.168.1.0/24 allow test 10.0.0.0/8 # 代理端口 socks -p1081 proxy -p8080 8.3 启用日志 daemon # 日志配置 log /var/log/3proxy.log D rotate 30 # 用户认证 auth strong users test:CL:123456 allow test # 代理端口 socks -p1081 proxy -p8080 九、常见问题排查 9.1 端口被占用 # 查看端口占用 sudo ss -tulnp | grep :1081 sudo ss -tulnp | grep :8080 # 杀死占用进程 sudo kill -9 \u003cPID\u003e 9.2 服务启动失败 # 查看服务状态 sudo systemctl status 3proxy.service # 查看详细日志 sudo journalctl -u 3proxy.service -f 9.3 配置文件语法错误 # 测试配置文件语法 sudo /usr/local/3proxy/3proxy -c /etc/3proxy/conf/3proxy.cfg 十、安全建议 10.1 密码安全 使用强密码，包含大小写字母、数字和特殊字符 定期更换密码 避免使用常见密码 10.2 网络安全 限制访问IP范围 定期检查访问日志 考虑使用VPN + 代理的组合方案 10.3 系统安全 定期更新系统和软件包 监控系统资源使用情况 设置适当的文件权限 结语 通过本文的详细步骤，您已经成功部署了一个功能完整的3proxy代理服务器。这个配置支持SOCKS5和HTTP两种代理协议，并启用了用户名密码认证，可以满足大部分代理需求。 记住，代理服务器只是网络工具，请遵守当地法律法规，合理使用。同时，定期维护和更新配置，确保服务的安全性和稳定性。 配置完成后，您就可以在客户端使用这个代理服务器了。如果遇到问题，可以参考常见问题排查部分，或者查看3proxy的官方文档。 ","date":"19190-08-08","objectID":"/posts/20250919-3proxy-deb-installation-guide/:0:0","tags":["技术分享","代理服务器","网络工具","系统配置"],"title":"3proxy .deb包安装教程：Socks5 + HTTP + 用户名密码认证","uri":"/posts/20250919-3proxy-deb-installation-guide/"},{"categories":null,"content":"Zellij终端复用器Ubuntu部署指南 一、Zellij简介 Zellij是一个现代化的终端复用器，用Rust编写，具有以下特点： 高性能：Rust语言编写，启动速度快，资源占用低 现代化UI：支持Unicode、真彩色、鼠标事件 布局系统：强大的布局管理，支持复杂的分屏需求 插件生态：丰富的插件支持，可扩展性强 跨平台：支持Linux、macOS、Windows 相比传统的tmux和screen，Zellij提供了更直观的用户界面和更强大的功能。 二、系统要求 Ubuntu 18.04 LTS 或更高版本 支持真彩色的终端模拟器 至少100MB可用磁盘空间 支持Unicode的字体 三、安装方法 3.1 使用Cargo安装 如果您已经安装了Rust和Cargo： # 安装Zellij cargo install zellij # 验证安装 zellij --version 3.2 手动下载安装 # 下载最新版本（以v0.43.0为例） wget https://github.com/zellij-org/zellij/releases/download/v0.43.1/zellij-x86_64-unknown-linux-musl.tar.gz # 解压 tar -xzf zellij-x86_64-unknown-linux-musl.tar.gz # 移动到系统路径 sudo mv zellij /usr/local/bin/ # 删除压缩包文件 rm -f zellij-x86_64-unknown-linux-musl.tar.gz # 验证安装 zellij --version 四、基础配置 4.1 自动启动配置 Zellij提供了自动启动功能，可以在创建新shell时自动启动Zellij会话。这对于希望始终在Zellij环境中工作的用户非常有用。 4.1.1 使用预定义脚本（推荐） Zellij提供了预定义的自动启动脚本，适用于不同的shell： Bash用户： echo 'eval \"$(zellij setup --generate-auto-start bash)\"' \u003e\u003e ~/.bashrc Zsh用户： echo 'eval \"$(zellij setup --generate-auto-start zsh)\"' \u003e\u003e ~/.zshrc 4.1.2 手动配置（Fish Shell） 对于Fish shell用户，需要手动添加配置到 ~/.config/fish/config.fish： if set -q ZELLIJ else zellij end 4.1.3 配置说明 这些配置会检查是否已经在Zellij环境中 如果不在Zellij环境中，则自动启动新的Zellij会话 避免在Zellij内部再次启动Zellij，防止嵌套会话 4.2 高级配置 默认配置即可满足大部分需求，如果需要自定义配置，可以参考官方文档。 五、常用操作 5.1 会话管理 # 启动新的Zellij会话 zellij # 启动命名会话 zellij -s my-session # 附加到现有会话 zellij a my-session # 列出所有会话 zellij ls # 杀死会话 zellij k my-session 也可以在zellij的session中通过gui管理session ctrl + o w 5.2 布局操作 Zellij提供了强大的布局系统： # 使用预定义布局启动 zellij --layout default # 创建自定义布局 zellij --layout ~/.config/zellij/layouts/my-layout.kdl 5.3 快捷键 Zellij的默认快捷键（在Normal模式下）： Ctrl+g：进入Normal模式 Ctrl+p：进入Pane模式 Ctrl+n：进入Tab模式 Ctrl+r：进入Resize模式 Ctrl+s：进入Scroll模式 Ctrl+c：进入Locked模式 在Pane模式下： h/j/k/l：切换窗格 n：新建窗格 x：关闭窗格 z：切换窗格全屏 在Tab模式下： h/l：切换标签页 n：新建标签页 x：关闭标签页 r：重命名标签页 六、高级功能 6.1 插件系统 Zellij支持丰富的插件生态： # 安装插件管理器 cargo install zellij-plugin-manager # 安装常用插件 zpm install tab-bar zpm install status-bar zpm install strider 6.2 自定义布局 创建自定义布局文件 ~/.config/zellij/layouts/dev.kdl： layout { pane size=1 borderless=true { plugin location=\"zellij:status-bar\" } pane split_direction=\"Vertical\" { pane size=\"70%\" { pane split_direction=\"Horizontal\" { pane size=\"50%\" { pane name=\"editor\" } pane size=\"50%\" { pane name=\"terminal\" } } } pane size=\"30%\" { pane name=\"logs\" } } } 6.3 集成开发环境 Zellij可以与各种开发工具集成： # 启动开发环境会话 zellij --session dev --layout dev # 在特定目录启动 zellij --session project --layout dev --cwd /path/to/project 七、故障排除 常见问题及解决方案 终端颜色显示异常 # 检查终端是否支持真彩色 echo -e \"\\x1b[38;2;255;100;0mTRUECOLOR\\x1b[0m\" 字体显示问题 # 安装支持Unicode的字体 sudo apt install fonts-noto-cjk 权限问题 # 确保配置文件权限正确 chmod 644 ~/.config/zellij/config.kdl 会话无法附加 # 检查会话状态 zellij list-sessions # 强制杀死会话 zellij kill-session --force session-name 八、最佳实践 8.1 会话管理 为不同项目创建独立的会话 使用有意义的会话名称 定期清理不需要的会话 8.2 布局优化 根据工作流程设计布局 合理分配窗格大小 使用插件增强功能 8.3 性能优化 避免在单个窗格中运行过多进程 定期重启长时间运行的会话 监控系统资源使用情况 8.4 备份配置 # 备份配置文件 cp ~/.config/zellij/config.kdl ~/.config/zellij/config.kdl.backup # 备份布局文件 tar -czf zellij-layouts-backup.tar.gz ~/.config/zellij/layouts/ 总结 Zellij是一个功能强大、性能优异的终端复用器，特别适合需要复杂终端工作流的开发者。通过本文的部署指南，您应该能够在Ubuntu系统上成功安装和配置Zellij，并充分利用其强大的功能来提升工作效率。 记住，Zellij的学习曲线可能比传统的tmux稍陡，但一旦熟悉其操作方式，您会发现它提供了更加直观和强大的终端管理体验。建议从基础功能开始，逐步探索高级特性，最终打造出适合自己工作习惯的终端环境。 ","date":"22220-08-08","objectID":"/posts/20250822-zellij-ubuntu-deployment/:0:0","tags":["开发工具","技术分享","终端工具"],"title":"Zellij终端复用器Ubuntu部署指南","uri":"/posts/20250822-zellij-ubuntu-deployment/"},{"categories":null,"content":"开发环境配置指南（Zsh + Rust） 本文提供了一套完整的开发环境配置方案，涵盖 Zsh 终端配置和 Rust 开发环境的搭建，帮助快速打造高效的开发工作流。 一、Zsh 环境配置 1. 安装 Zsh sudo apt update sudo apt install zsh -y 2. 设置 Zsh 为默认 shell chsh -s $(which zsh) 注：执行后需要注销或重启终端才能生效。 3. 安装 Oh My Zsh sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" Oh My Zsh 是一个开源的 Zsh 配置管理框架，提供了丰富的主题和插件系统。 4. 安装常用插件 4.1 zsh-autosuggestions（自动补全） 根据历史命令自动提示： git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions 4.2 zsh-syntax-highlighting（语法高亮） 为命令提供语法高亮： git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting 5. 完整的 .zshrc 配置文件 下面是一个经过优化的完整配置示例，你可以直接复制使用或根据需求修改： # ============================================ # Oh My Zsh 基础配置 # ============================================ # 设置 Oh My Zsh 安装路径 export ZSH=\"$HOME/.oh-my-zsh\" # 主题设置 # 推荐主题: robbyrussell (默认)、agnoster、powerlevel10k、random ZSH_THEME=\"robbyrussell\" # ============================================ # 插件配置 # ============================================ # 启用的插件列表 # 注意：插件太多会影响终端启动速度 plugins=( git # Git 命令别名和提示 z # 快速目录跳转 zsh-autosuggestions # 自动补全建议 zsh-syntax-highlighting # 语法高亮（必须放在最后） sudo # 按两次 ESC 在命令前添加 sudo extract # 一键解压各种格式 colored-man-pages # 彩色 man 手册 command-not-found # 命令未找到时提供安装建议 history-substring-search # 历史命令搜索 ) # 加载 Oh My Zsh source $ZSH/oh-my-zsh.sh # ============================================ # 个人环境变量配置 # ============================================ # 设置默认编辑器 export EDITOR='vim' export VISUAL='vim' # 设置语言环境 export LANG=en_US.UTF-8 export LC_ALL=en_US.UTF-8 # 历史命令配置 export HISTSIZE=10000 # 内存中保存的历史命令数量 export SAVEHIST=10000 # 文件中保存的历史命令数量 setopt HIST_IGNORE_ALL_DUPS # 删除重复的历史记录 setopt HIST_FIND_NO_DUPS # 查找时忽略重复 setopt HIST_REDUCE_BLANKS # 删除多余空格 setopt INC_APPEND_HISTORY # 立即追加到历史文件 setopt SHARE_HISTORY # 多个终端共享历史 # ============================================ # Rust 开发环境 # ============================================ # Cargo 环境变量 if [ -f \"$HOME/.cargo/env\" ]; then source \"$HOME/.cargo/env\" fi # Rust 工具链路径 export PATH=\"$HOME/.cargo/bin:$PATH\" # Rust 编译优化选项（可选） export RUSTFLAGS=\"-C target-cpu=native\" # ============================================ # 自定义别名 # ============================================ # 系统操作 alias cls='clear' alias c='clear' alias h='history' alias q='exit' alias ..='cd ..' alias ...='cd ../..' alias ....='cd ../../..' # ls 增强 alias ls='ls --color=auto' alias ll='ls -lh' alias la='ls -lAh' alias l='ls -CF' # 安全操作 alias rm='rm -i' alias cp='cp -i' alias mv='mv -i' # Git 快捷命令 alias gs='git status' alias ga='git add' alias gc='git commit' alias gp='git push' alias gl='git pull' alias gd='git diff' alias gco='git checkout' alias gb='git branch' alias glog='git log --oneline --graph --decorate' # Rust 开发 alias cb='cargo build' alias cr='cargo run' alias ct='cargo test' alias cc='cargo check' alias cclean='cargo clean' alias cupdate='cargo update' alias cfmt='cargo fmt' alias clippy='cargo clippy' # 系统信息 alias ports='netstat -tulanp' alias meminfo='free -m -l -t' alias cpuinfo='lscpu' alias diskinfo='df -h' # 网络工具 alias myip='curl ifconfig.me' alias ping='ping -c 5' alias fastping='ping -c 100 -s.2' # ============================================ # 自定义函数 # ============================================ # 创建并进入目录 mkcd() { mkdir -p \"$1\" \u0026\u0026 cd \"$1\" } # 快速搜索文件 ff() { find . -type f -name \"*$1*\" } # 快速搜索目录 fd() { find . -type d -name \"*$1*\" } # 解压所有常见格式 extract() { if [ -f $1 ]; then case $1 in *.tar.bz2) tar xjf $1 ;; *.tar.gz) tar xzf $1 ;; *.bz2) bunzip2 $1 ;; *.rar) unrar e $1 ;; *.gz) gunzip $1 ;; *.tar) tar xf $1 ;; *.tbz2) tar xjf $1 ;; *.tgz) tar xzf $1 ;; *.zip) unzip $1 ;; *.Z) uncompress $1 ;; *.7z) 7z x $1 ;; *) echo \"'$1' 无法被解压\" ;; esac else echo \"'$1' 不是有效的文件\" fi } # 创建新的 Rust 项目并进入 newrust() { cargo new \"$1\" \u0026\u0026 cd \"$1\" } # ============================================ # PATH 扩展（根据需要添加） # ============================================ # 示例：添加本地 bin","date":"141418-08-08","objectID":"/posts/20250814-rust-env-init/:0:0","tags":["技术分享","Rust","开发工具"],"title":"Rust开发环境初始化","uri":"/posts/20250814-rust-env-init/"}]